/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    // TreeNode prev;
    // TreeNode first; // for storing first node out of order
    // TreeNode second; // for storing second node out of order
    // boolean flag; //to detect if its first or second breach
    
    public void recoverTree(TreeNode root) {
    TreeNode prev = null;
    TreeNode first = null;
    TreeNode second = null;
    boolean flag = false;
        
        Stack<TreeNode> st = new Stack<>();
        
        while(root != null || !st.isEmpty())
        {
            while(root != null)
            {
                st.push(root);
                root = root.left;
                
            }
            
            root = st.pop();
            if(prev!= null && prev.val >= root.val)
            {
                if(flag)
                {
                    second = root;
                }
                
                else
                {
                    first = prev;
                    second = root;
                    flag = true;
                }
            }    
            prev = root;
            root = root.right;
        }
    
        int temp = first.val;
        first.val = second.val;
        second.val = temp;
        } 
}

//space O(h)
//time :O(N)



/// Recursive

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    TreeNode prev;
    TreeNode first; // for storing first node out of order
    TreeNode second; // for storing second node out of order
    boolean flag; //to detect if its first or second breach
    public void recoverTree(TreeNode root) {
        inorder(root);
        int temp = first.val;
        first.val = second.val;
        second.val = temp;;
    }
    
    private void inorder(TreeNode root)
    {
        if(root == null) return;
        
        inorder(root.left);
        if(prev !=null && prev.val>= root.val)
        {
            // Breach
            if(flag)  // means first breach
            {
                second = root;
            }
            
            else
            {
                first = prev;
                second = root;
                flag = true;;
            }
        
        }
        prev = root;
        inorder(root.right);
    }
}
