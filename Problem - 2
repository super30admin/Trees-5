# 99. Recover Binary Search Tree
'''
Leetcode all test cases passed: Yes
class Solution:
    def recoverTree(self, root: Optional[TreeNode]) -> None:
      h is height of binary tree
      n is no of nodes in binary tree
      Time Complexity: O(n)
      Space Complexity: O(h)
'''

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def recoverTree(self, root: Optional[TreeNode]) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        self.first= None
        self.second = None
        self.prev = None
        def dfs(root):
            if root == None:
                return

            dfs(root.left)
            if self.prev != None and self.prev.val > root.val:
                if self.first == None:
                    self.first = self.prev
                    self.second = root
                else:
                    self.second = root

            self.prev = root
            dfs(root.right)

        dfs(root)
        self.first.val,self.second.val = self.second.val,self.first.val 
        return root
