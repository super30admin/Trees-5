# Time Complexity - o(n)
# Space Complexity - o(h)


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    
    def recoverTree(self, root: TreeNode) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        first=None
        middle=None
        last=None
        prev=None
        def inorder(root):
        #base case
            nonlocal first
            nonlocal middle
            nonlocal last
            nonlocal prev
            if(root==None):
                return

            #logic
            inorder(root.left)
            if(prev!=None and root.val<prev.val):
                if(first==None):
                    first=prev
                    middle=root
                else:
                    last=root
            prev=root
            inorder(root.right)
        inorder(root)
        if(last!=None):
            first.val,last.val=last.val,first.val
        if(last==None):
            first.val,middle.val=middle.val,first.val
