/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

class Solution {
    
    //116. Populating Next Right Pointers in Each Node
    //Level order traversal method
    //Time compelixty : O(n) where n is the number of nodes
    //Space complexity : O(n)
   
    public Node connect(Node root) {
        if(root == null)
            return null;
        Queue<Node> q = new LinkedList<>();
       
        q.add(root);
        
        while(!q.isEmpty()){
            int size = q.size();
            Node prev = q.poll();   
            if(prev.left!=null){        //because it's a perfect binary tree, just check                                            for one child 
                 q.add(prev.left);
                q.add(prev.right);
            }
               
            for(int i=1;i<size;i++){
                Node curr = q.poll();
                if(curr.left!=null){
                    q.add(curr.left);
                    q.add(curr.right);
                }
                prev.next = curr;
                prev = curr;
                
                
            }
        }
        return root;
    }
}