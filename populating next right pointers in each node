#Time Complexity - o(n)
# Space Complexity - o(2^h)

# Definition for a Node.
class Node:
    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):
        self.val = val
        self.left = left
        self.right = right
        self.next = next

class Solution:
    def connect(self, root: 'Node') -> 'Node':
        if(root==None):
            return None
        q=deque()
        if root:
            q.append(root)
        while q:
            size=len(q)
            prev=q.popleft()

            if prev.left:
                q.append(prev.left)
            if prev.right:
                q.append(prev.right)

            for i in range(1,size):

                curr=q.popleft()
                prev.next=curr
                prev=curr
                if curr.left:
                    q.append(curr.left)
                if curr.right:
                    q.append(curr.right)
        return root
      
 ## with constant space
 
 """
# Definition for a Node.
class Node:
    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):
        self.val = val
        self.left = left
        self.right = right
        self.next = next
"""

class Solution:
    def connect(self, root: 'Node') -> 'Node':
        if(root==None):
            return
        temp=root
        while(temp.left!=None):
            curr=temp
            while(curr!=None):
                curr.left.next=curr.right
                if(curr.next!=None):
                    curr.right.next=curr.next.left
                curr=curr.next
            temp=temp.left
        return root
                    
 
            
