APPROACH : DFS - Recursive

Time complexity: O(n)
Space complexity: O(1)
Did this code successfully submitted on leetcode: Yes

/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

class Solution {
    public Node connect(Node root) {
        
        if(root == null)
            return root;
        
        if(root!=null){
            if(root.right!=null){
                root.left.next = root.right;
                
                if(root.next!=null){
                    root.right.next = root.next.left;
                }
            }
            connect(root.left);
            connect(root.right);
        }
      return root;  
    }
}

*****************************************************************************************************************************
APPROACH : DFS - Iterative

Time complexity: O(n)
Space complexity: O(1)
Did this code successfully submitted on leetcode: Yes

/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

class Solution {
    public Node connect(Node root) {
        if(root == null)
            return root;
        
        Node temp = root;
        
        Stack<Node> stack = new Stack<>();
        
        stack.push(root);
        
        while(root!=null || !stack.isEmpty()){
            
            root = stack.pop();
            
            if(root!=null){
                if(root.right!=null){
                    root.left.next = root.right;
                
                    if(root.next!=null){
                        root.right.next = root.next.left;
                    }
                }
                
                stack.push(root.left);
                stack.push(root.right);
            }
        }
        return temp;
    }
}

