# Binary Tree Inorder Traversal

#Both solutions have a time complexity of O(n) where n is the number of nodes in the binary tree, and a space complexity of O(n) due to the usage of the stack in the iterative solution and the recursive function call stack in the recursive solution.

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        result = []
        self.inorder_recursive(root, result)
        return result
    
    def inorder_recursive(self, node: TreeNode, result: List[int]) -> None:
        if node:
            self.inorder_recursive(node.left, result)
            result.append(node.val)
            self.inorder_recursive(node.right, result)

    def inorderTraversalIterative(self, root: Optional[TreeNode]) -> List[int]:
        result = []
        stack = []
        curr = root
        
        while curr or stack:
            while curr:
                stack.append(curr)
                curr = curr.left
                
            curr = stack.pop()
            result.append(curr.val)
            curr = curr.right
        
        return result
