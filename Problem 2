#Recover Binary Search Tree

#This algorithm runs in O(N) time complexity, where N is the number of nodes in the binary tree. We perform a single in-order traversal of the tree. 
#The space complexity is O(H), where H is the height of the tree, as it depends on the maximum depth of the function call stack during the traversal.

class Solution:
    def recoverTree(self, root: TreeNode) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        stack = []
        x = y = pred = None

        # In-order traversal to find the two misplaced elements
        while stack or root:
            while root:
                stack.append(root)
                root = root.left

            root = stack.pop()

            if pred and root.val < pred.val:
                y = root
                if x is None:
                    x = pred
                else:
                    break
            pred = root
            root = root.right

        # Swap the values of the two misplaced elements
        x.val, y.val = y.val, x.val
