APPROACH : RECURSIVE 

Time complexity: O(m+n)
Space complexity: O(maxDepth)
Did this code successfully submitted on leetcode: Yes

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    TreeNode prev, first, middle, last;
    public void recoverTree(TreeNode root) {
        
        //base case
        if(root == null)
            return;
        
        inorder(root);
        
        if(first!=null && last!=null){
            int temp = first.val;
            first.val = last.val;
            last.val = temp;
        }else if(first!=null && middle!=null){
            int temp = first.val;
            first.val = middle.val;
            middle.val = temp;
        }      
    }
    
    private void inorder( TreeNode root){
        
        //base case
        if(root == null)
            return;
        
        //logic
        inorder(root.left);
        if(prev!=null && root.val<prev.val){
            if(first==null){
                first = prev;
                middle = root;
            }else{
                last = root;
            }
        }
        prev = root;
        inorder(root.right);
    }
}

******************************************************************************************************************************

APPROACH : ITERATIVE 

Time complexity: O(m+n)
Space complexity: O(maxDepth)
Did this code successfully submitted on leetcode: Yes

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    TreeNode prev, first, middle, last;
    public void recoverTree(TreeNode root) {
        
        //base case
        if(root == null)
            return;
        
        inorder(root);
        
        if(first!=null && last!=null){
            int temp = first.val;
            first.val = last.val;
            last.val = temp;
        }else if(first!=null && middle!=null){
            int temp = first.val;
            first.val = middle.val;
            middle.val = temp;
        }      
    }
    
    private void inorder( TreeNode root){
        
        Stack<TreeNode> st = new Stack<>();
        
        while(root!=null || !st.isEmpty()){
            while(root!=null){
                st.push(root);
                root=root.left;
            }
            
            root = st.pop();
            
            if(prev!=null && root.val<prev.val){
                if(first==null){
                    first = prev;
                    middle = root;
                }else{
                    last = root;
                }
            }
            prev = root;
            root = root.right;
        }
    }
}
