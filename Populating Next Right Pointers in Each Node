Approach1 : Level Order Traversal
Time Complexity : O(N)
Space Complexity : O(N)
/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

class Solution {
    public Node connect(Node root) { // Perfect Binary Tree - Every node has two children and all the leafs are at same level
        // Edge Case
        if (root==null) return null;
        //Logic 
        Queue<Node> q=new LinkedList<>();
        q.add(root);
        while(!q.isEmpty()){
            int size=q.size();
            for (int i=0;i<size;i++){
                Node curr=q.poll();
                if(i!=size-1) { // Level by Level traversing the tree
                   curr.next=q.peek(); 
                }
                if (curr.left!=null) {
                    q.add(curr.left);
                    q.add(curr.right);
                    }             
            }            
        }
        return root;
        
    }
}

Approach 2 : Without a queue
Time Complexity : O(N)
Space complexity : O(1)
/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

class Solution {
    public Node connect(Node root) { // Level order traversal without queue by standing at the one level above and process the level below
        // Edge Case
        if(root==null) return null;
        Node level=root; 
        while(level.left!=null){ //Iterate  level by level
            Node curr=level; 
            while(curr!=null){// To iterate inside the level
                curr.left.next=curr.right;
                if (curr.next!=null){
                    curr.right.next=curr.next.left;
                }
                curr=curr.next;
            }
            level=level.left;
        }
        return root;
        
        
    }
}
