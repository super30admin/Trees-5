/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    //99. Recover Binary Search Tree
    //Time compelxity : O(n)
    //Space compelxity : O(1)
    
        TreeNode prev;
        TreeNode first;
        TreeNode last;
         boolean flag;
    public void recoverTree(TreeNode root) {
        
       
        inorder(root);
        //swap both
        int temp = first.val;
        first.val = last.val;
        last.val = temp;
        
    }
    private void inorder(TreeNode root){
        
        //base condition
        if(root == null)
            return;
        
        
        inorder(root.left);
        if(prev!=null && prev.val >= root.val){
            if(!flag){
                //first breach
                flag = true;
                first = prev;
                last = root;
            }
            else //second breach
            {
                last = root;
            }
        }
        
        prev = root;
        inorder(root.right);
        
    }
}